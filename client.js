let grpc = require("grpc");
let protoLoader = require("@grpc/proto-loader");

let proto = grpc.loadPackageDefinition(
    protoLoader.loadSync("./proto/solc.proto",{
        keepCase: true,
        longs: String,
        enums: String,
        defaults: true,
        oneofs: true
      })
);

const source1 = `// SPDX-License-Identifier: MIT

pragma solidity >=0.5.0 <0.9.0;

contract HelloWorld {
    string defaultName;
    mapping(address => string) public accounts;

    constructor() public {
        defaultName = "World";
    }

    function getMessage() public view returns (string memory) {
        string memory name = bytes(accounts[msg.sender]).length > 0
            ? accounts[msg.sender]
            : defaultName;
        return concat("Hello", name);
    }

    function setName(string memory name) public returns (bool success) {
        require(bytes(name).length > 0);
        accounts[msg.sender] = name;
        return true;
    }

    function concat(string memory _base, string memory _value)
        internal
        pure
        returns (string memory)
    {
        bytes memory _baseBytes = bytes(_base);
        bytes memory _valueBytes = bytes(_value);
        string memory _tmpValue = new string(
            _baseBytes.length + _valueBytes.length
        );
        bytes memory _newValue = bytes(_tmpValue);
        uint256 i;
        uint256 j;
        for (i = 0; i < _baseBytes.length; i++) {
            _newValue[j++] = _baseBytes[i];
        }
        for (i = 0; i < _valueBytes.length; i++) {
            _newValue[j++] = _valueBytes[i];
        }
        return string(_newValue);
    }
}`
  const REMOTE_SERVER = "0.0.0.0:2021";
let client = new proto.iotex.SolcService(REMOTE_SERVER, grpc.credentials.createInsecure());
let compilerInput = {
  version: "0.5.9+commit.e560f70d",
  language: "Solidity",
  settings:{
    optimizer:{
      enabled: true,
      runs: 200,
    }
  },
  sources: [
    {
      name: "hello.sol",
      content: source1,
    },
  ],
}
//client.compiler(compilerInput, (err, res) =>{ console.log(res); } );

const input = {
  language: 'Solidity',
  sources: {
    "hello.sol": {
      content: `contract HelloWorld {
        bytes32 message;
        constructor(bytes32 myMessage) public {
            message = myMessage;
        }
    
        function getMessage() public view returns(bytes32){
            return message;
        }
    }`
    }
  },
  settings: {
    outputSelection: {
      '*': {
        '*': ['*']
      }
    }
  }
}
compilerInput = {
  version: "0.6.9+commit.3e3065ac",
  inputJSON: JSON.stringify(input),
}
//client.compilerStandardJSON(compilerInput, (err, res) =>{ console.log(res); } );

let verifierInput = {
  version:"0.5.7+commit.6da8b019",
  bytecodeFromChain: "608060405234801561001057600080fd5b506040805180820190915260058082527f576f726c6400000000000000000000000000000000000000000000000000000060209092019182526100559160009161005b565b506100f6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009c57805160ff19168380011785556100c9565b828001600101855582156100c9579182015b828111156100c95782518255916020019190600101906100ae565b506100d59291506100d9565b5090565b6100f391905b808211156100d557600081556001016100df565b90565b610554806101056000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635e5c06e214610046578063c47f0027146100e1578063ce6d41de1461019b575b600080fd5b61006c6004803603602081101561005c57600080fd5b50356001600160a01b03166101a3565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100a657818101518382015260200161008e565b50505050905090810190601f1680156100d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610187600480360360208110156100f757600080fd5b81019060208101813564010000000081111561011257600080fd5b82018360208201111561012457600080fd5b8035906020019184600183028401116401000000008311171561014657600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061023d945050505050565b604080519115158252519081900360200190f35b61006c610275565b60016020818152600092835260409283902080548451600294821615610100026000190190911693909304601f81018390048302840183019094528383529192908301828280156102355780601f1061020a57610100808354040283529160200191610235565b820191906000526020600020905b81548152906001019060200180831161021857829003601f168201915b505050505081565b60008082511161024c57600080fd5b336000908152600160209081526040909120835161026c92850190610487565b50600192915050565b606080600060016000336001600160a01b03166001600160a01b03168152602001908152602001600020805460018160011615610100020316600290049050116102c05760006102d0565b3360009081526001602052604090205b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103545780601f1061032957610100808354040283529160200191610354565b820191906000526020600020905b81548152906001019060200180831161033757829003601f168201915b505050505090506103826040518060400160405280600581526020016448656c6c6f60d81b81525082610389565b9150505b90565b6060808390506060839050606081518351016040519080825280601f01601f1916602001820160405280156103c5576020820181803883390190505b509050806000805b8551821015610421578582815181106103e257fe5b602001015160f81c60f81b8382806001019350815181106103ff57fe5b60200101906001600160f81b031916908160001a9053506001909101906103cd565b600091505b845182101561047a5784828151811061043b57fe5b602001015160f81c60f81b83828060010193508151811061045857fe5b60200101906001600160f81b031916908160001a905350600190910190610426565b5090979650505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106104c857805160ff19168380011785556104f5565b828001600101855582156104f5579182015b828111156104f55782518255916020019190600101906104da565b50610501929150610505565b5090565b61038691905b80821115610501576000815560010161050b56fea265627a7a72305820e2bb19f9117f9397a230bf3d6bea871069f4e7fe1e00028cf161af2dee3cf32e64736f6c63430005090032",
  bytecodeFromCompiler:"608060405234801561001057600080fd5b506040805180820190915260058082527f576f726c6400000000000000000000000000000000000000000000000000000060209092019182526100559160009161005b565b506100f6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009c57805160ff19168380011785556100c9565b828001600101855582156100c9579182015b828111156100c95782518255916020019190600101906100ae565b506100d59291506100d9565b5090565b6100f391905b808211156100d557600081556001016100df565b90565b610554806101056000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635e5c06e214610046578063c47f0027146100e1578063ce6d41de1461019b575b600080fd5b61006c6004803603602081101561005c57600080fd5b50356001600160a01b03166101a3565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100a657818101518382015260200161008e565b50505050905090810190601f1680156100d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610187600480360360208110156100f757600080fd5b81019060208101813564010000000081111561011257600080fd5b82018360208201111561012457600080fd5b8035906020019184600183028401116401000000008311171561014657600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061023d945050505050565b604080519115158252519081900360200190f35b61006c610275565b60016020818152600092835260409283902080548451600294821615610100026000190190911693909304601f81018390048302840183019094528383529192908301828280156102355780601f1061020a57610100808354040283529160200191610235565b820191906000526020600020905b81548152906001019060200180831161021857829003601f168201915b505050505081565b60008082511161024c57600080fd5b336000908152600160209081526040909120835161026c92850190610487565b50600192915050565b606080600060016000336001600160a01b03166001600160a01b03168152602001908152602001600020805460018160011615610100020316600290049050116102c05760006102d0565b3360009081526001602052604090205b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103545780601f1061032957610100808354040283529160200191610354565b820191906000526020600020905b81548152906001019060200180831161033757829003601f168201915b505050505090506103826040518060400160405280600581526020016448656c6c6f60d81b81525082610389565b9150505b90565b6060808390506060839050606081518351016040519080825280601f01601f1916602001820160405280156103c5576020820181803883390190505b509050806000805b8551821015610421578582815181106103e257fe5b602001015160f81c60f81b8382806001019350815181106103ff57fe5b60200101906001600160f81b031916908160001a9053506001909101906103cd565b600091505b845182101561047a5784828151811061043b57fe5b602001015160f81c60f81b83828060010193508151811061045857fe5b60200101906001600160f81b031916908160001a905350600190910190610426565b5090979650505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106104c857805160ff19168380011785556104f5565b828001600101855582156104f5579182015b828111156104f55782518255916020019190600101906104da565b50610501929150610505565b5090565b61038691905b80821115610501576000815560010161050b56fea265627a7a72305820b1fe5791c4934eb33e496ecb527e7cbbcabc28fde833a8c3729e5b85c01ebc8364736f6c63430005090032"
}
client.verifier(verifierInput, (err, res) =>{ console.log(res); } );