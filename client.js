let grpc = require("grpc");
let protoLoader = require("@grpc/proto-loader");

let proto = grpc.loadPackageDefinition(
    protoLoader.loadSync("./proto/solc.proto",{
        keepCase: true,
        longs: String,
        enums: String,
        defaults: true,
        oneofs: true
      })
);

const source1 = `// SPDX-License-Identifier: MIT

pragma solidity >=0.5.0 <0.9.0;

contract HelloWorld {
    string defaultName;
    mapping(address => string) public accounts;

    constructor() public {
        defaultName = "World";
    }

    function getMessage() public view returns (string memory) {
        string memory name = bytes(accounts[msg.sender]).length > 0
            ? accounts[msg.sender]
            : defaultName;
        return concat("Hello", name);
    }

    function setName(string memory name) public returns (bool success) {
        require(bytes(name).length > 0);
        accounts[msg.sender] = name;
        return true;
    }

    function concat(string memory _base, string memory _value)
        internal
        pure
        returns (string memory)
    {
        bytes memory _baseBytes = bytes(_base);
        bytes memory _valueBytes = bytes(_value);
        string memory _tmpValue = new string(
            _baseBytes.length + _valueBytes.length
        );
        bytes memory _newValue = bytes(_tmpValue);
        uint256 i;
        uint256 j;
        for (i = 0; i < _baseBytes.length; i++) {
            _newValue[j++] = _baseBytes[i];
        }
        for (i = 0; i < _valueBytes.length; i++) {
            _newValue[j++] = _valueBytes[i];
        }
        return string(_newValue);
    }
}`
  const REMOTE_SERVER = "0.0.0.0:2021";
let client = new proto.iotex.SolcService(REMOTE_SERVER, grpc.credentials.createInsecure());
let compilerInput = {
  version: "0.5.9+commit.e560f70d",
  language: "Solidity",
  settings:{
    optimizer:{
      enabled: true,
      runs: 200,
    }
  },
  sources: [
    {
      name: "hello.sol",
      content: source1,
    },
  ],
}
client.compiler(compilerInput, (err, res) =>{ console.log(res); } );

const input = {
  language: 'Solidity',
  sources: {
    "hello.sol": {
      content: `contract HelloWorld {
        bytes32 message;
        constructor(bytes32 myMessage) public {
            message = myMessage;
        }
    
        function getMessage() public view returns(bytes32){
            return message;
        }
    }`
    }
  },
  settings: {
    outputSelection: {
      '*': {
        '*': ['*']
      }
    }
  }
}
compilerInput = {
  version: "0.6.9+commit.3e3065ac",
  inputJSON: JSON.stringify(input),
}
//client.compilerStandardJSON(compilerInput, (err, res) =>{ console.log(res); } );

let verifierInput = {
  version:"0.5.17+commit.d19bba13",
  bytecodeFromChain: "608060405234801561001057600080fd5b506102b7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a5643bf214610046578063cdcd77c0146101a1578063fce353f6146101f9575b600080fd5b61019f6004803603606081101561005c57600080fd5b810190808035906020019064010000000081111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111640100000000831117156100ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035151590602001909291908035906020019064010000000081111561011c57600080fd5b82018360208201111561012e57600080fd5b8035906020019184602083028401116401000000008311171561015057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061025e565b005b6101df600480360360408110156101b757600080fd5b81019080803563ffffffff169060200190929190803515159060200190929190505050610263565b604051808215151515815260200191505060405180910390f35b61025c6004803603604081101561020f57600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929050505061027f565b005b505050565b600060208363ffffffff1611806102775750815b905092915050565b5056fea265627a7a723158200463365dee103ccdbf89679e11d769fe00b316a938d94fc7100aea32798a8a1664736f6c634300051100320000000000000000000000003ff650bf5eb2ec1dfb1ae4410839fda182ca34ff000000000000000000000000ee0546ea5f318d1e1c1178d1060a4b75cbf58e23000000000000000000000000578c8323c175b7b1d36bb1693c592fbc8cbcada10000000000000000000000005c64c066a4be6c0dd3c95be7e2973f28831238840000000000000000000000004b992c9d46760c9a9ab2efc35f38f25254cbecb0",
  bytecodeFromCompiler:"608060405234801561001057600080fd5b506102b7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a5643bf214610046578063cdcd77c0146101a1578063fce353f6146101f9575b600080fd5b61019f6004803603606081101561005c57600080fd5b810190808035906020019064010000000081111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111640100000000831117156100ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035151590602001909291908035906020019064010000000081111561011c57600080fd5b82018360208201111561012e57600080fd5b8035906020019184602083028401116401000000008311171561015057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061025e565b005b6101df600480360360408110156101b757600080fd5b81019080803563ffffffff169060200190929190803515159060200190929190505050610263565b604051808215151515815260200191505060405180910390f35b61025c6004803603604081101561020f57600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929050505061027f565b005b505050565b600060208363ffffffff1611806102775750815b905092915050565b5056fea265627a7a723158206537683bee2facd7a6678ef8c163b55f6cd78ca908868f4fbee34c0a635e104c64736f6c63430005110032"
}
client.verifier(verifierInput, (err, res) =>{ console.log(res); } );